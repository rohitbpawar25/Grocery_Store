#define N 4 
#include <stdio.h> 
/* Function to print solution */ 
void printSolution(int board[N][N]) { 
    printf("\n\n Solution for 4 queen problem =\n\n"); 
    for (int i = 0; i < N; i++) { 
        for (int j = 0; j < N; j++) 
            printf(" %d ", board[i][j]); 
        printf("\n"); 
    } 
} 
/* Function to check if a queen can be placed on board[row][col] */ 
int isSafe(int board[N][N], int row, int col) { 
    int i, j; 
    /* Check this row on left side */ 
    for (i = 0; i < col; i++) 
        if (board[row][i]) 
            return 0; 
    /* Check upper diagonal on left side */ 
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--) 
        if (board[i][j]) 
            return 0; 
    /* Check lower diagonal on left side */ 
    for (i = row, j = col; j >= 0 && i < N; i++, j--) 
        if (board[i][j]) 
            return 0; 
    return 1; 
} 
/* A recursive utility function to solve N Queen problem */ 
int solveNQUtil(int board[N][N], int col) { 
    /* base case: If all queens are placed then return true */ 
    if (col >= N) 
        return 1; 
    /* Try placing this queen in all rows one by one */ 
    for (int i = 0; i < N; i++) { 
        /* Check if the queen can be placed on board[i][col] */ 
        if (isSafe(board, i, col)) { 
            /* Place this queen in board[i][col] */ 
            board[i][col] = 1; 
            /* Recur to place rest of the queens */ 
            if (solveNQUtil(board, col + 1)) 
                return 1; 
            /* If placing queen in board[i][col] doesn't lead to a solution 
               then remove queen from board[i][col] */ 
            board[i][col] = 0; // BACKTRACK 
        } 
    } 
    /* If the queen cannot be placed in any row in this column, return false */ 
    return 0; 
} 
/* This function solves the N Queen problem using Backtracking. */ 
int solveNQ() { 
    int board[N][N] = { { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 }, 
                        { 0, 0, 0, 0 } }; 
    if (solveNQUtil(board, 0) == 0) { 
        printf("Solution does not exist\n"); 
        return 0; 
    } 
 
    printSolution(board); 
    return 1; 
} 
int main() { 
    solveNQ(); 
    return 0; 
}
